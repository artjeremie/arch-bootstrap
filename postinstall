#!/bin/sh
# https://github.com/hoaxdream
# author: hoaxdream
# change the value of User in int_transmission
CORE_UUID=$(blkid -s UUID -o value /dev/nvme1n1p1)
DATA_UUID=$(blkid -s UUID -o value /dev/sda1)

# disable auto run of xdg to use .config/user-dir.dirs instead
int_xdg()
  {
    sed -i 's/enabled=True/enabled=False/g' /etc/xdg/user-dirs.conf
  }
# disable watchdog
int_watchdog()
  {
    echo blacklist iTCO_wdt > /etc/modprobe.d/watchdog.conf
    echo blacklist iTCO_vendor_support >> /etc/modprobe.d/watchdog.conf
  }
# nvidia early module loading
int_nvidia()
  {
    mkdir -p /etc/pacman.d/hooks
    cat >/etc/pacman.d/hooks/nvidia.hook <<'EOF'
[Trigger]
Operation=Install
Operation=Upgrade
Operation=Remove
Type=Package
Target=nvidia
Target=linux

[Action]
Description=Update Nvidia module in initcpio
Depends=mkinitcpio
When=PostTransaction
NeedsTargets
Exec=/bin/sh -c 'while read -r trg; do case $trg in linux) exit 0; esac; done; /usr/bin/mkinitcpio -P'
EOF
  }
# use systemd instead of udev for silentboot
int_initramfs()
  {
    # add nvidia modules
    sed -i 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm)/g' /etc/mkinitcpio.conf
    # change udev to systemd for silent boot
    sed -i 's/HOOKS=(base udev autodetect modconf block filesystems keyboard fsck)/HOOKS=(base systemd autodetect modconf block filesystems keyboard fsck)/g' /etc/mkinitcpio.conf
    # generate mkinitcpio
    mkinitcpio -p linux
  }
# make dir for games and data
int_chdir()
  {
    mkdir /media/
    cd /media
    mkdir core data
  }
# dump UUID to fstab
int_uuid()
  {
echo "# /dev/nvme1n1p1
UUID=$CORE_UUID /media/core ext4 rw,user,exec 0 0

# /dev/sda1
UUID=$DATA_UUID /media/data ext4 rw,user,exec 0 0" | tee -a /etc/fstab >/dev/null
  }
# reboot the run this manually
int_done()
  {
    echo "fsck-root.service: Edit with sudo -E systemctl edit --full systemd-fsck-root.service"
    echo "fsck@.service: Edit with sudo -E systemctl edit --full systemd-fsck@.service"
    echo " "
cat << EOF
Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/lib/systemd/systemd-fsck
StandardOutput=null
StandardError=journal+console
TimeoutSec=0
EOF
    echo "Reboot then manually configure systemd-fsck-root.service and systemd-fsck@.service then reboot"
  }

echo 'xdg'
int_xdg
echo 'watchdog'
int_watchdog
echo 'nvidia modules'
int_nvidia
echo 'initramfs'
int_initramfs
echo 'directory created'
int_chdir
echo 'uuid'
int_uuid
echo 'NOTE!'
int_done
